upstream backend {
    server 127.0.0.1:5000;
}

server {
    listen 80;
    listen [::]:80;
    server_name backend_proxy;

    location / {
        proxy_pass          http://backend;
        proxy_http_version  1.1;
        proxy_set_header    X-Real-IP $remote_addr;
        proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header    Host $http_host;
    }

    location /echo {
        proxy_pass          http://backend;
        proxy_http_version  1.1;
        proxy_set_header    X-Real-IP $remote_addr;
        proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header    Host $http_host;
        proxy_set_header    Upgrade $http_upgrade;
        proxy_set_header    Connection "upgrade";
    }
}

#
# This server block is only needed if you need Proxy Protocol support and use a classic
# ELB with TCP+TLS because of web sockets. The load balancer health check mechanism does not
# actually send the requests through the load balancer in front of the service. This means the
# health check traffic that reaches the server does not adhere to the proxy protocol and when
# Nginx is configured to expect proxy protocol requests then things do not work as expected.
#
# Read more about Proxy Protocol on Amazon:
#   - http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-proxy-protocol.html
#

#server {
#    listen 81;
#    listen [::]:81;
#    server_name backend_health_proxy;
#
#    location = /health {
#        proxy_pass          http://backend;
#        proxy_http_version  1.1;
#        proxy_set_header    X-Real-IP $remote_addr;
#        proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
#        proxy_set_header    Host $http_host;
#    }
#}
